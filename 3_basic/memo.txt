-------------------------------------------------------

- 변수에 타입을 할당할 수 있다.
var str: string = "엄준식"
let num: number = 1557;

-------------------------------------------------------

let arr: number[] = [1, 2, 3];
let heros: string[] = ['토르']

튜플: 배열에서 확장된 타입으로, 인덱스별 타입까지 지정

let address: [string, number] = ['gangnam', 100];


객체

let obj: object = {}; // 모든 객체의 프로토타입
let person: {name: string; age: number;} = {
  name: 'Capt',
  age: 100
}

-------------------------------------------------------

함수
- 인자 + 리턴값에 대한 타입을 지정 (함수의 프로토타입)

function sum(a: number, b: number):number {
  return a + b;
}

- js는 함수정의에 입력한 인자보다 더 많은 인자를 호출시 전달가능
  하지만 ts에서는 에러가 발생


옵셔널 파라미터
- 인자 타입정의에 ?를 추가하여 인자를 무조건 사용하지 않아도 됨을 명시

function log (a: string, b?: string) {
  return 
}

void는 반환값이 없음을 의미
- return 문 자체가 없거나, return이 값을 반환하지 않는 경우

-------------------------------------------------------

any 타입은 모든 타입에 사용할 수 있는 치트키 같은 타입입니다.
특정 데이터의 타입을 잘 모르거나 자바스크립트 프로젝트에 타입스크립트를 점진적으로
적용할 때 사용하면 좋은 타입입니다.
단어 의미 그대로 모든 타입에 대해서 허용한다는 의미를 갖고 있습니다.

any 타입을 많이 사용하면 사용할수록 타입스크립트의 장점이 사라짐
꼭 필요할 때만 주의해서 사용

-------------------------------------------------------

never 타입은 절대 발생하지 않는 값을 의미하는 타입
- 함수가 반복문이나 에러 핸들링으로 인해 함수의 끝에 절대 도달하지 않는 경우에 
  never 타입을 사용

-------------------------------------------------------